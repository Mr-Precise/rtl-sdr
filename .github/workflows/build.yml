name: rtl-sdr CI cmake build

on:
  push:
    branches: [ main, devel ]
  pull_request:
    branches: [ main, devel ]

env:
    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    build_ubuntu_latest-amd64:
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3
      - name: Install prerequisites
        run: sudo apt -qq update && sudo apt -yqq install libusb-1.0-0-dev
      - name: run_cmake_build
        run: mkdir build && cmake -DENABLE_ZEROCOPY=ON -DDETACH_KERNEL_DRIVER=ON -DINSTALL_UDEV_RULES=ON --install-prefix=/usr -S . -B build && cd build && make && make install DESTDIR=`pwd`/rtl-sdr_build_ubuntu-amd64
      - name: Generate debian package
        run: cd build && cpack -G DEB
      - name: Compress binaries
        run: tar zcvf rtl-sdr_build_ubuntu_latest-amd64.tar.gz --directory=build rtl-sdr_build_ubuntu-amd64
      - name: move tar.gz to Generated Packages
        run: mv rtl-sdr_build_ubuntu_latest-amd64.tar.gz build/Generated_Packages/
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu_latest_build
          path: build/Generated_Packages/

    build_ubuntu-amd64_20_04:
      runs-on: ubuntu-20.04

      steps:
      - uses: actions/checkout@v3
      - name: Install prerequisites
        run: sudo apt -qq update && sudo apt -yqq install libusb-1.0-0-dev
      - name: run_cmake_build
        run: mkdir build && cmake -DENABLE_ZEROCOPY=ON -DDETACH_KERNEL_DRIVER=ON -DINSTALL_UDEV_RULES=ON --install-prefix=/usr -S . -B build && cd build && make && make install DESTDIR=`pwd`/rtl-sdr_build_ubuntu-amd64
      - name: Generate debian package
        run: cd build && cpack -G DEB
      - name: Compress binaries
        run: tar zcvf rtl-sdr_build_ubuntu_20.04-amd64.tar.gz --directory=build rtl-sdr_build_ubuntu-amd64
      - name: move tar.gz to Generated Packages
        run: mv rtl-sdr_build_ubuntu_20.04-amd64.tar.gz build/Generated_Packages/
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu_20_04_build
          path: build/Generated_Packages/

    build_macos_latest:
      runs-on: macos-latest

      steps:
      - uses: actions/checkout@v3
      #- name: reinstall libusb
      #  run: brew reinstall libusb
      - name: install pkg-config
        run: brew install pkg-config
      - name: run_cmake_build
        run: mkdir build && cmake -DDETACH_KERNEL_DRIVER=ON -S . -B build && cd build && make && make install DESTDIR=`pwd`/rtl-sdr_build_macos_intel
      - name: Compress binaries
        run: tar zcvf rtl-sdr_build_macos_intel-latest.tar.gz --directory=build rtl-sdr_build_macos_intel
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: macos_latest_build
          path: rtl-sdr_build_macos_intel-latest.tar.gz

    build_macos_11:
      runs-on: macos-11

      steps:
      - uses: actions/checkout@v3
      #- name: reinstall libusb
      #  run: brew reinstall libusb
      - name: install pkg-config
        run: brew install pkg-config
      - name: run_cmake_build
        run: mkdir build && cmake -DDETACH_KERNEL_DRIVER=ON -S . -B build && cd build && make && make install DESTDIR=`pwd`/rtl-sdr_build_macos_intel
      - name: Compress binaries
        run: tar zcvf rtl-sdr_build_macos_11_intel.tar.gz --directory=build rtl-sdr_build_macos_intel
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: macos_11_build
          path: rtl-sdr_build_macos_11_intel.tar.gz

    build_win_2019_64:
      runs-on: windows-2019

      steps:
        - uses: actions/checkout@v3

        - name: Create Build Environment
          run: cmake -E make_directory ${{runner.workspace}}/build

        - name: Download rtl-sdr build-kit
          run: Invoke-WebRequest -Uri "https://github.com/Mr-Precise/SDR-binary-builds-stuff/releases/download/windows/rtl-sdr-build-kit-2023.2.1.zip" -OutFile ${{runner.workspace}}/rtl-sdr-build-kit-2023.2.1.zip

        - name: Unpack rtl-sdr build-kit
          run: 7z x ${{runner.workspace}}/rtl-sdr-build-kit-2023.2.1.zip -o"${{runner.workspace}}"

        - name: Remove Perl pkg-config.bat (conflicts with CMake)
          run: del C:/Strawberry/perl/bin/pkg-config.bat

        - name: Prepare CMake
          working-directory: ${{runner.workspace}}/build
          run: cmake "$Env:GITHUB_WORKSPACE" -DCMAKE_INSTALL_PREFIX=${{runner.workspace}}/build/rtl-sdr-msvc142-Win64 -DLINK_RTL_APPS_WITH_STATIC_LIB=ON -DLIBUSB_INCLUDE_DIRS=${{runner.workspace}}/rtl-sdr-build-kit/libusb/Win64/v142/Release/include/libusb-1.0 -DLIBUSB_LIBRARIES=${{runner.workspace}}/rtl-sdr-build-kit/libusb/Win64/v142/Release/lib/libusb-1.0.lib -DTHREADS_PTHREADS_INCLUDE_DIR=${{runner.workspace}}/rtl-sdr-build-kit/pthread-win32/Win64/Release/include -DTHREADS_PTHREADS_LIBRARY=${{runner.workspace}}/rtl-sdr-build-kit/pthread-win32/Win64/Release/lib/pthreadVC3.lib

        - name: Build
          working-directory: ${{runner.workspace}}/build
          run: cmake --build . --config Release --target INSTALL --verbose
        - name: Generate Windows installer
          working-directory: ${{runner.workspace}}/build
          run: cpack -G NSIS64
        - name: Compress binaries
          run: 7z a rtl-sdr_build_VS2019_Win64.zip ${{runner.workspace}}/build/rtl-sdr-msvc142-Win64
        - name: move zip to Packages
          run: mv rtl-sdr_build_VS2019_Win64.zip ${{runner.workspace}}/build/Generated_Packages/
        - name: 'Upload Artifact'
          uses: actions/upload-artifact@v3
          with:
            name: windows_2019_build
            path: ${{runner.workspace}}/build/Generated_Packages/

    create_archive:
      needs: ['build_ubuntu_latest-amd64', 'build_ubuntu-amd64_20_04', 'build_macos_latest', 'build_macos_11', 'build_win_2019_64']
      runs-on: ubuntu-latest

      steps:
      - name: Extract All Builds
        uses: actions/download-artifact@v3

      - name: Create Archive
        run: >
          ls && 
          mkdir rtl-sdr_all && 
          tar zcvf rtl-sdr_build_ubuntu_latest-amd64.tar.gz ubuntu_latest_build && 
          mv rtl-sdr_build_ubuntu_latest-amd64.tar.gz rtl-sdr_all/ && 
          tar zcvf rtl-sdr_build_ubuntu_20.04-amd64.tar.gz ubuntu_20_04_build && 
          mv rtl-sdr_build_ubuntu_20.04-amd64.tar.gz rtl-sdr_all/ && 
          mv macos_latest_build/rtl-sdr_build_macos_intel-latest.tar.gz rtl-sdr_all/ && 
          mv macos_11_build/rtl-sdr_build_macos_11_intel.tar.gz rtl-sdr_all/ && 
          7z a rtl-sdr_build_VS2019_Win64.zip -r windows_2019_build && 
          mv rtl-sdr_build_VS2019_Win64.zip rtl-sdr_all/

      - uses: actions/upload-artifact@v3
        with:
          name: rtl-sdr_all
          path: rtl-sdr_all/

    update_nightly_release:
      needs: [create_archive]
      runs-on: ubuntu-latest
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      steps:
      - name: Extract All Builds
        uses: actions/download-artifact@v3

      - name: Update Nightly
        run: gh release upload nightly rtl-sdr_all/* -R ${{github.repository}} --clobber
